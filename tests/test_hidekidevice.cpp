/*
 * atMETEO - An ATmega based weather station
 * Copyright (C) 2014-2015 Christian Fetzer
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

/*!
 * \file
 * \ingroup libsensors_tests
 *
 * \brief Unit tests for Sensors::HidekiDevice.
 */

#include <gmock/gmock.h>

#include "utils.h"

#include "lib/hidekisensor.h"

using ::std::extent;
using ::testing::AnyOf;
using ::testing::Eq;
using ::testing::TestWithParam;
using ::testing::Values;
using ::Sensors::HidekiSensor;
using ::Sensors::HidekiDevice;
using ::Sensors::RfDeviceStatus;

// Noise
static const uint16_t noise[] = {
    50123, 10534, 56, 342, 123, 756, 42123, 4332, // Noise before the message
    51234, 900, 900, 900, 900, 900, 900, 900, 900, 900, // Parity Error
    21345,
    900, 900, 900, 900, 900, 450, 450, 900, 900, 900, // Incorrect header
    12112
};

// Message 1: Close to the receiver (1 m)
static const uint16_t message1[] = {
    900, 924, 868, 932, 864, 498, 403, 493, 401, 946, 406, 494, 848, 950, 400,
    499, 854, 498, 395, 950, 402, 500, 395, 511, 392, 508, 385, 510, 845, 955,
    838, 518, 376, 522, 381, 965, 830, 976, 380, 512, 833, 970, 829, 988, 358,
    521, 833, 533, 361, 979, 374, 532, 364, 528, 372, 528, 820, 527, 373, 531,
    366, 982, 373, 532, 360, 535, 370, 534, 811, 532, 371, 527, 366, 534, 368,
    535, 367, 980, 819, 981, 368, 532, 813, 535, 366, 532, 368, 984, 365, 536,
    367, 528, 365, 541, 363, 532, 361, 537, 818, 529, 363, 992, 808, 988, 815,
    982, 363, 539, 808, 536, 366, 535, 358, 993, 811, 532, 364, 987, 811, 993,
    361, 536, 358, 540, 362, 543, 351, 545, 357, 542, 360, 536, 358, 540, 360,
    538, 357, 51248,

    862, 957, 838, 961, 837, 526, 378, 514, 381, 972, 381, 509,
    835, 968, 380, 525, 825, 518, 378, 976, 374, 533, 363, 526, 377, 518, 376,
    526, 826, 974, 822, 534, 362, 537, 363, 983, 817, 983, 363, 531, 822, 978,
    820, 991, 357, 534, 369, 533, 810, 998, 356, 525, 370, 532, 371, 532, 813,
    533, 371, 534, 359, 990, 365, 529, 364, 541, 360, 539, 807, 537, 366, 547,
    348, 541, 360, 534, 360, 990, 817, 984, 364, 540, 806, 540, 364, 539, 357,
    992, 360, 542, 355, 541, 358, 547, 357, 532, 363, 544, 810, 536, 358, 992,
    807, 997, 800, 994, 361, 541, 808, 540, 361, 542, 353, 998, 801, 543, 359,
    546, 354, 540, 356, 993, 354, 543, 809, 989, 808, 539, 363, 540, 355, 996,
    358, 540, 355, 50915,

    858, 962, 834, 966, 829, 529, 376, 516, 378, 975, 373,
    526, 826, 971, 377, 525, 827, 523, 374, 975, 379, 524, 368, 531, 373, 521,
    375, 530, 823, 972, 825, 532, 366, 529, 371, 978, 819, 984, 362, 530, 823,
    980, 817, 983, 363, 540, 814, 977, 368, 538, 363, 529, 365, 538, 365, 533,
    813, 538, 365, 534, 360, 993, 363, 524, 370, 540, 361, 538, 808, 539, 365,
    538, 357, 541, 359, 539, 358, 989, 815, 991, 356, 538, 808, 538, 364, 543,
    354, 993, 361, 539, 358, 546, 354, 538, 363, 533, 363, 541, 804, 542, 359,
    998, 800, 992, 806, 997, 357, 541, 807, 542, 359, 533, 360, 997, 803, 541,
    359, 995, 352, 543, 359, 543, 353, 550, 352, 541, 804, 541, 361, 987, 812,
    994, 353, 548, 356, 64172
};

// 4 Meter distance, same room
static const uint16_t message2[] = {
    893, 939, 863, 937, 860, 491, 403, 501, 401, 957, 393, 492, 853, 951, 401,
    501, 848, 500, 397, 956, 395, 504, 395, 503, 394, 502, 393, 506, 842, 959,
    841, 508, 389, 511, 388, 961, 838, 965, 384, 522, 827, 970, 830, 962, 385,
    516, 834, 521, 377, 970, 381, 526, 821, 521, 381, 523, 375, 520, 378, 528,
    373, 975, 373, 526, 373, 529, 369, 529, 820, 531, 366, 538, 361, 533, 366,
    537, 363, 983, 815, 984, 367, 534, 358, 535, 812, 537, 365, 984, 365, 537,
    364, 534, 362, 548, 353, 540, 811, 982, 366, 536, 813, 990, 809, 986, 813,
    988, 360, 537, 363, 546, 804, 545, 355, 988, 360, 539, 812, 991, 359, 538,
    810, 535, 362, 536, 364, 987, 362, 545, 354, 535, 365, 536, 362, 546, 352,
    51227,

    876, 959, 841, 958, 836, 513, 390, 511, 388, 968, 381, 519, 830, 973, 377,
    518, 829, 521, 380, 967, 385, 515, 374, 519, 381, 525, 372, 524, 822, 977,
    824, 527, 372, 529, 370, 981, 820, 979, 368, 532, 819, 978, 819, 979, 369,
    531, 370, 535, 812, 982, 369, 548, 800, 533, 366, 531, 369, 531, 366, 535,
    366, 981, 366, 536, 364, 537, 361, 536, 813, 538, 361, 537, 361, 535, 366,
    535, 354, 999, 801, 988, 361, 535, 364, 538, 812, 534, 365, 988, 361, 544,
    355, 537, 361, 543, 356, 538, 810, 991, 359, 550, 800, 988, 811, 993, 804,
    993, 358, 539, 360, 538, 813, 543, 356, 990, 359, 541, 358, 543, 358, 542,
    356, 549, 800, 993, 806, 536, 357, 546, 354, 544, 355, 996, 354, 545, 352,
    50900,

    871, 960, 838, 962, 838, 509, 389, 528, 376, 961, 389, 512, 832, 968, 385,
    515, 832, 517, 383, 967, 372, 522, 379, 522, 376, 520, 379, 525, 824, 974,
    822, 530, 371, 530, 368, 980, 820, 982, 365, 526, 825, 979, 822, 985, 364,
    530, 820, 981, 368, 531, 371, 533, 816, 540, 358, 534, 368, 530, 367, 535,
    364, 988, 362, 540, 359, 532, 365, 534, 816, 531, 366, 539, 355, 531, 367,
    535, 365, 984, 818, 985, 361, 536, 366, 534, 811, 539, 362, 986, 366, 533,
    364, 539, 361, 539, 360, 536, 812, 987, 363, 538, 810, 989, 813, 995, 803,
    995, 357, 537, 363, 543, 808, 541, 358, 988, 363, 546, 801, 539, 361, 986,
    806, 540, 360, 990, 809, 990, 808, 996, 354, 545, 356,
    43979
};

// 5 meter distance, outside, Window in between
static const uint16_t message3[] = {
    866, 968, 827, 973, 824, 536, 356, 539, 356, 998, 362, 538, 812, 984, 361,
    536, 805, 548, 360, 986, 358, 542, 354, 548, 354, 535, 367, 541, 804, 991,
    804, 553, 351, 543, 357, 1002, 792, 1001, 350, 550, 802, 999, 796, 999, 356,
    546, 798, 551, 348, 1000, 350, 552, 795, 550, 347, 553, 349, 558, 340, 550,
    348, 1003, 348, 549, 348, 557, 341, 551, 806, 553, 348, 547, 347, 556, 342,
    556, 343, 1007, 796, 1002, 346, 554, 793, 550, 346, 566, 336, 1005, 337,
    562, 342, 558, 336, 553, 349, 556, 791, 1018, 332, 556, 799, 1005, 793,
    1021, 775, 1008, 342, 560, 791, 560, 337, 567, 333, 1005, 341, 562, 784,
    1005, 348, 557, 342, 564, 780, 1010, 791, 567, 330, 562, 346, 1012, 338,
    562, 335, 51262,

    839, 987, 809, 987, 806, 542, 355, 544, 359, 1001, 354, 542, 808, 988, 363,
    543, 803, 546, 353, 992, 357, 537, 357, 543, 363, 537, 356, 544, 805, 990,
    809, 546, 351, 558, 341, 1000, 795, 1001, 346, 554, 804, 1001, 799, 1003,
    344, 547, 356, 541, 799, 1007, 348, 547, 798, 548, 350, 555, 336, 562, 341,
    556, 341, 1004, 342, 568, 333, 565, 332, 559, 793, 554, 344, 558, 347, 546,
    352, 557, 343, 1004, 792, 1009, 337, 558, 791, 563, 339, 550, 353, 995, 353,
    555, 341, 561, 337, 564, 337, 559, 788, 1003, 345, 565, 781, 1008, 789,
    1018, 789, 1003, 344, 555, 796, 556, 344, 556, 342, 1008, 342, 559, 344,
    566, 327, 561, 336, 569, 327, 565, 335, 568, 330, 566, 338, 553, 341, 559,
    338, 566, 334, 573, 325, 565, 336, 50934,

    837, 986, 812, 984, 808, 545, 358, 538, 368, 1000, 350, 533, 811, 995, 359,
    541, 803, 550, 344, 998, 359, 538, 356, 542, 354, 551, 351, 548, 799, 997,
    799, 547, 351, 548, 351, 1003, 793, 1000, 356, 546, 807, 1012, 786, 997,
    353, 543, 809, 989, 352, 553, 349, 556, 792, 548, 348, 548, 353, 542, 353,
    548, 357, 1003, 336, 552, 345, 553, 347, 555, 795, 551, 350, 551, 345, 555,
    348, 568, 332, 1003, 795, 1008, 342, 556, 792, 555, 343, 554, 340, 1019,
    337, 550, 347, 555, 348, 550, 342, 558, 792, 1006, 343, 554, 792, 1006, 789,
    1012, 791, 1016, 341, 550, 799, 560, 339, 558, 338, 1011, 342, 559, 787,
    562, 335, 1007, 342, 562, 789, 557, 340, 1012, 788, 1006, 343, 561, 341,
    559, 344, 11555
};

// 5 meter distance, outside, Windows in between
static const uint16_t message4[] = {
    819, 1036, 761, 1010, 788, 565, 323, 577, 331, 1026, 319, 587, 762, 1037,
    310, 588, 762, 576, 324, 1037, 306, 597, 301, 591, 309, 593, 311, 628, 720,
    1047, 746, 588, 312, 600, 304, 1062, 736, 1092, 254, 610, 739, 1068, 735,
    1058, 289, 625, 725, 613, 283, 1062, 741, 607, 290, 1077, 271, 612, 285,
    620, 734, 616, 282, 612, 285, 1060, 288, 612, 731, 634, 270, 624, 276, 611,
    289, 616, 281, 1068, 729, 1088, 265, 615, 282, 625, 272, 623, 277, 618, 728,
    631, 274, 624, 275, 634, 263, 1066, 729, 1087, 268, 638, 711, 1075, 723,
    1075, 727, 1074, 722, 1090, 708, 639, 259, 1075, 728, 620, 278, 1081, 268,
    625, 722, 1089, 714, 1086, 711, 1072, 725, 1099, 254, 51316,

    789, 1042, 754, 1075, 721, 603, 299, 597, 305, 1060, 288, 601, 747, 1054,
    294, 620, 732, 618, 278, 1073, 275, 608, 290, 614, 285, 605, 300, 619, 728,
    1059, 737, 605, 291, 627, 273, 1067, 736, 1064, 283, 630, 716, 1055, 749,
    1064, 283, 621, 277, 623, 724, 1065, 740, 618, 278, 1065, 283, 616, 280,
    627, 719, 645, 260, 623, 274, 1067, 281, 617, 733, 629, 272, 636, 265, 619,
    278, 616, 282, 1076, 720, 1074, 280, 621, 277, 616, 283, 611, 286, 625, 723,
    622, 282, 622, 278, 623, 273, 1071, 727, 1078, 269, 637, 716, 1068, 730,
    1088, 708, 1096, 707, 1083, 715, 631, 265, 1074, 730, 1086, 260, 629, 269,
    636, 711, 639, 258, 630, 276, 622, 278, 1075, 722, 624, 273, 1080, 273,
    50969,

    798, 1039, 757, 1050, 745, 604, 295, 610, 295, 1061, 286, 595, 752, 1046,
    304, 604, 748, 607, 292, 1073, 275, 608, 288, 602, 298, 635, 260, 646, 707,
    1067, 730, 615, 281, 607, 292, 1065, 738, 1077, 270, 618, 729, 1076, 729,
    1061, 286, 625, 722, 1099, 247, 637, 719, 638, 257, 1062, 284, 621, 276,
    607, 740, 619, 287, 629, 269, 1076, 271, 615, 730, 618, 282, 635, 270, 626,
    273, 627, 269, 1080, 718, 1080, 273, 625, 272, 625, 274, 640, 259, 614, 728,
    621, 279, 630, 275, 624, 275, 1072, 723, 1070, 278, 624, 730, 1070, 725,
    1077, 721, 1073, 729, 1082, 714, 635, 263, 1091, 712, 632, 266, 635, 264,
    1085, 711, 1080, 268, 654, 701, 640, 258, 618, 276, 647, 251, 1104, 246,
    44727
};

struct MessageParameter
{
    MessageParameter(const uint16_t *message, size_t size,
                     float temperature = 0.0f, uint8_t humidity = 0) :
        message(message), size(size),
        temperature(temperature), humidity(humidity)
    {
    }

    const uint16_t *message;
    const size_t size;
    const float temperature;
    const uint8_t humidity;
};

class Receiver : public TestWithParam<MessageParameter>
{
};

/*!
 * \brief Parameterized test for Sensors::HidekiDevice.
 */
TEST_P(Receiver, TestMessages)
{
    HidekiDevice<200, 675, 675, 1150> hidekiDevice;

    MessageParameter param = GetParam();

    for (uint16_t i = 0; i < extent<decltype(noise)>::value; ++i) {

        EXPECT_THAT(hidekiDevice.addPulseWidth(noise[i]), AnyOf(
                        Eq(RfDeviceStatus::Incomplete),
                        Eq(RfDeviceStatus::InvalidData)));
    }

    int messageCount = 0;
    for (uint16_t i = 0; i < param.size; ++i) {
        if (hidekiDevice.addPulseWidth(param.message[i]) ==
                RfDeviceStatus::Complete) {
            ++messageCount;

            EXPECT_EQ(messageCount, hidekiDevice.message());
            EXPECT_FLOAT_EQ(param.temperature, hidekiDevice.temperatureF());
            EXPECT_EQ(param.humidity, hidekiDevice.humidity());
        }
    }
    EXPECT_EQ(3, messageCount);
}

static const MessageParameter messageParameter1(
        message1, extent<decltype(message1)>::value, 24.8, 12);
static const MessageParameter messageParameter2(
        message2, extent<decltype(message2)>::value, 24.2, 14);
static const MessageParameter messageParameter3(
        message3, extent<decltype(message3)>::value, 24.2, 12);
static const MessageParameter messageParameter4(
        message4, extent<decltype(message4)>::value, 22.5, 10);

/*!
 * \brief Parameterized test instantiation for
 *        \ref TEST_P(Receiver, TestMessages).
 */
INSTANTIATE_TEST_CASE_P(TestMessages, Receiver, Values(
    messageParameter1, messageParameter2, messageParameter3, messageParameter4
));
